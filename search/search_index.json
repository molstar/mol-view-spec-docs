{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MolViewSpec","text":"<p>MolViewSpec (MVS) is a toolkit for standardized description of reproducible molecular visualizations shareable across software applications. MolViewSpec describes a 3D molecular scene by a MolViewSpec State, a viewer-independent representation that contains all information necessary to reproduce the scene. Thanks to its nested tree-based format, complex scenes can be composed from simple building blocks.</p> <p>The MolViewSpec toolkit includes:</p> <ul> <li> <p>Specification of the MolViewSpec format defines the structure of the MolViewSpec States and the properties of individual nodes of the tree data structure. The specification is provided by this documentation and formalized by the OpenAPI JSON Schema.</p> </li> <li> <p>MolViewSpec builder API provides a mechanism for building and validating MolViewSpec States. The API is available in multiple programming languages:</p> <ul> <li> <p>in Python via MolViewSpec Python package</p> </li> <li> <p>in JavaScript/TypeScript via MolViewSpec extension in Mol*</p> </li> </ul> </li> <li> <p>MolViewSpec viewer extensions provide ability to interpret and render MolViewSpec States in individual molecular viewers. Currently, there is only one viewer extension:</p> <ul> <li>MolViewSpec extension in Mol*. This extension also serves as the reference implementation for MolViewSpec viewer extensions.</li> </ul> </li> </ul>"},{"location":"#additional-sources","title":"Additional sources","text":"<ul> <li>MolViewSpec home page with plenty of examples</li> <li>Interactive Google Colab example showing the MolViewSpec Python package in action</li> </ul>"},{"location":"#molviewspec-functionality-overview","title":"MolViewSpec functionality overview","text":"<p>MolViewSpec uses a tree-based approach to compose complex scenes from simple building blocks. The following list is a high-level overview of these blocks:</p> <ul> <li>Download - define source of structural data</li> <li>Parse - parse structural data in various formats</li> <li>Structure - create structure (supports assemblies, crystal symmetry, multi-model structures)</li> <li>Transform - apply rotation and translation to a structure</li> <li>Component - select substructures (components) of a structure, e.g. by chain identifier or sequence position</li> <li>Representation - define structure representation modes (cartoon, ball-and-stick, ...), including support for coarse-grained IHM data</li> <li>Color - define custom colors (including opacity) for selections</li> <li>Label - define labels (textual representation in the 3D scene)</li> <li>Tooltip - define tooltips (text shown when interacting with a component)</li> <li>Camera - set camera position and orientation explicitly</li> <li>Focus - set camera position and orientation automatically to focus a given component (optionally: render non-covalent interactions)</li> <li>Volumetric Data - render electron density data</li> <li>Canvas - set background color</li> <li>Annotations - create data-driven components, colorings, labels, or tooltips; based on MolViewSpec annotations (additional data stored either in the source structure file (mmcif, bcif) or in an external annotation file referenced by URI)</li> <li>Primitives - draw custom ellipses, boxes, arrows, or meshes</li> <li>Multiple States &amp; Animations - tell molecular stories by chaining individual scenes and views</li> </ul>"},{"location":"#molviewspec-data-structure","title":"MolViewSpec data structure","text":"<p>MVS is based on a tree format, i.e. a molecular view is described as a nested tree where individual nodes represent data operations needed to create the view. Each node is defined by its kind (specifies the type of operation, e.g. <code>download</code>, <code>parse</code>, <code>color</code>) and parameters (provide additional details for the operation, e.g. <code>url</code>, <code>format</code>, <code>selector</code>). </p> <p>A simple example of a MVS tree showing PDB structure 1cbs:</p> <pre><code>\u2500root {}\n \u251c\u2500\u2500download {url: \"https://www.ebi.ac.uk/pdbe/entry-files/1cbs.bcif\"}\n \u2502  \u2514\u2500\u2500parse {format: \"bcif\"}\n \u2502     \u2514\u2500\u2500structure {type: \"model\"}\n \u2502        \u251c\u2500\u2500component {selector: \"polymer\"}\n \u2502        \u2502  \u251c\u2500\u2500representation {type: \"cartoon\"}\n \u2502        \u2502  \u2502  \u251c\u2500\u2500color {color: \"green\"}\n \u2502        \u2502  \u2502  \u2514\u2500\u2500color {selector: {label_asym_id: \"A\", beg_label_seq_id: 1, end_label_seq_id: 50}, color: \"#6688ff\"}\n \u2502        \u2502  \u2514\u2500\u2500label {text: \"Protein\"}\n \u2502        \u2514\u2500\u2500component {selector: \"ligand\"}\n \u2502           \u251c\u2500\u2500representation {type: \"ball_and_stick\"}\n \u2502           \u2502  \u2514\u2500\u2500color {color: \"#cc3399\"}\n \u2502           \u2514\u2500\u2500label {text: \"Retinoic Acid\"}\n \u251c\u2500\u2500canvas {background_color: \"#ffffee\"}\n \u2514\u2500\u2500camera {target: [17,21,27], position: [41,34,69], up: [-0.129,0.966,-0.224]}\n</code></pre> <p>This is a schematic representation of the tree, not the actual data format! Each line represents a node defined by its kind (root, download, parse...) and parameters (everything within {braces}).</p> <p>Resulting view (created by MolViewSpec extension in Mol*):</p> <p></p> <p>This example downloads a structure file from \"https://www.ebi.ac.uk/pdbe/entry-files/1cbs.bcif\" and creates a structure from it. It defines two components of the structure (polymer and ligand) and applies different 3D representation and color to them (polymer: cartoon representation in green, with residue range 1\u201350 in chain A selective colored to light blue; ligand: ball-and-stick in magenta). It also adds a label for each component, and sets the camera orientation and background color.</p> <p>A complete list of supported node kinds and their parameters is described by the MVS tree schema.</p> <p>An OpenAPI JSON schema is avalaible in molviewspec-v1-openapi-schema.json.</p>"},{"location":"#encoding","title":"Encoding","text":""},{"location":"#mvsj","title":"MVSJ","text":"<p>A MolViewSpec tree can be encoded and stored in <code>.mvsj</code> format (MolViewSpec JSON), which is basically a JSON representation of the tree with additional metadata. The example above would be encoded as:</p> <pre><code>{\n  \"metadata\": {\n    \"title\": \"Example MolViewSpec - 1cbs with labelled protein and ligand\",\n    \"version\": \"1\",\n    \"timestamp\": \"2023-11-24T10:38:17.483Z\"\n  },\n  \"root\": {\n    \"kind\": \"root\",\n    \"children\": [\n      {\n        \"kind\": \"download\",\n        \"params\": {\"url\": \"https://www.ebi.ac.uk/pdbe/entry-files/1cbs.bcif\"},\n        \"children\": [\n          {\n            \"kind\": \"parse\",\n            \"params\": {\"format\": \"bcif\"},\n            \"children\": [\n    ...\n</code></pre> <p>Complete file: 1cbs.mvsj</p>"},{"location":"#mvsx","title":"MVSX","text":"<p>The MolViewSpec tree can also be stored in a <code>.mvsx</code> format. This is simply a ZIP archive containing:</p> <ul> <li>main file <code>index.mvsj</code> (contains the MolViewSpec tree encoded as MVSJ),</li> <li>any number of other files, such as MVS annotations or structure files.</li> </ul> <p>The advantage of this format is that the main file can reference other files in the archive using relative URIs. Thus the view description along with all necessary data can be stored as a single MVSX file.</p> <p>It is important that the <code>index.mvsj</code> be at the top level of the archive, not in a subdirectory. When creating the archive from command line:</p> <pre><code>$ ls example/\nannotations-1h9t.cif   index.mvsj\n$ zip -r example.mvsx example/            # Wrong, won't create a valid MVSX file\n$ cd example/; zip -r ../example.mvsx *   # Correct\n</code></pre> <p>Example: 1ht9.mvsx</p>"},{"location":"#topics","title":"Topics","text":"<ul> <li>MVS tree schema</li> <li>Selectors</li> <li>Annotations</li> <li>Camera settings</li> <li>Primitives</li> <li>Volumetric Data</li> <li>Animations</li> <li>MolViewSpec extension in Mol*</li> <li>Demos: Molecular story telling &amp; I/HM restraints</li> </ul>"},{"location":"animations/","title":"MolViewSpec animations","text":"<p>Animations are sequential collections of individual MolViewSpec scenes. You can combine them freely into complex stories that render scenes one-by-one. The Mol* viewer can interpolate between these states, providing you with a powerful story telling tool tailored to structural biology.</p>"},{"location":"animations/#creating-snapshots","title":"Creating snapshots","text":"<p>Use the builder as normal and define the desired scene. Invoke <code>get_snapshot()</code> to obtain a snapshot instance (in  contrast to the default way of emitting the generated state description using <code>get_state()</code>).</p> <pre><code>snapshot1 = builder.get_snapshot(\n    title=\"1tqn\",\n    description=\"\"\"\n### 1tqn with ligand and electron density map\n- 2FO-FC at 1.5\u03c3, blue\n- FO-FC (positive) at 3\u03c3, green\n- FO-FC (negative) at -3\u03c3, red\n\"\"\",\n)\n</code></pre> <p>A snapshot can hold additional metadata such as a custom title and description. Markup is supported.</p>"},{"location":"animations/#combining-snapshots","title":"Combining snapshots","text":"<p>Individual snapshots can then be combined into an animation by providing them in the desired order using the <code>snapshots</code> parameter. Additionally, global metadata can be added that describes shared properties of all snapshots.</p> <pre><code>states = States(snapshots=[snapshot1, snapshot2], metadata=GlobalMetadata(description=\"1tqn + Volume Server\")).json(\n    exclude_none=True, indent=2\n)\n</code></pre> <p>The output is valid MolViewSpec JSON that can be opened in Mol. Mol will interpolate between individual substates and  add smooth transitions by default. You can further customize this behavior using the <code>transition_duration_ms</code> and  <code>linger_duration_ms</code> properties. </p>"},{"location":"annotations/","title":"MolViewSpec annotations","text":"<p>Annotations are used to define substructures (components) and apply colors, labels, or tooltips to them. In contrast to selectors, annotations are defined in a separate file, which can then be referenced in the main MVS file.</p>"},{"location":"annotations/#mvs-annotation-files","title":"MVS annotation files","text":"<p>MVS annotations can be encoded in multiple different formats, but their logic is always the same and in fact very similar to that of selectors.</p>"},{"location":"annotations/#json-format","title":"JSON format","text":"<p>The simplest example of an annotation in JSON format is just a JSON-encoded union component expression selector. Here is a simple annotation containing 4 annotation rows:</p> <pre><code>[\n    { \"label_asym_id\": \"A\" },\n    { \"label_asym_id\": \"B\" },\n    { \"label_asym_id\": \"B\", \"beg_label_seq_id\": 100, \"end_label_seq_id\": 200 },\n    { \"label_asym_id\": \"B\", \"beg_label_seq_id\": 150, \"end_label_seq_id\": 160 }\n]\n</code></pre> <p>However, in a typical annotation, there is at least one extra field that provides the value of the dependent variable (such as color or label) mapped to each annotation row:</p> <pre><code>[\n    { \"label_asym_id\": \"A\", \"color\": \"#00ff00\" },\n    { \"label_asym_id\": \"B\", \"color\": \"blue\" },\n    { \"label_asym_id\": \"B\", \"beg_label_seq_id\": 100, \"end_label_seq_id\": 200, \"color\": \"skyblue\" }\n    { \"label_asym_id\": \"B\", \"beg_label_seq_id\": 150, \"end_label_seq_id\": 160, \"color\": \"lightblue\" }\n]\n</code></pre> <p>This particular annotation (when applied via <code>color_from_uri</code> node) will apply green color (#00ff00) to the whole chain A and three shades of blue to the chain B. Later annotation rows override earlier rows, therefore residues 1\u201399 will be blue, 100\u2013149 skyblue, 150\u2013160 lightblue, 161\u2013200 skyblue, and 201\u2013end blue. (Tip: to color all the rest of the structure in one color, add an annotation row with no selector fields (e.g. <code>{ \"color\": \"yellow\" }</code>) to the beginning of the annotation.)</p> <p>Real-life annotation files can include huge numbers of annotation rows. To avoid repeating the same field keys in every row, we can convert the array-of-objects into object-of-arrays. This will result in an equivalent annotation but smaller file size:</p> <pre><code>{\n    \"label_asym_id\": [\"A\", \"B\", \"B\", \"B\"],\n    \"beg_label_seq_id\": [null, null, 100, 150],\n    \"end_label_seq_id\": [null, null, 200, 160],\n    \"color\": [\"#00ff00\", \"blue\", \"skyblue\", \"lightblue\"]\n}\n</code></pre> <p>A more complex example of JSON annotation is provided in 1h9t_domains.json.</p>"},{"location":"annotations/#cif-format","title":"CIF format","text":"<p>Annotations can also be encoded using CIF format, a table-based format which is commonly used in structure biology to store structures or any kind of tabular data.</p> <p>The example from above, encoded as CIF, would look like this:</p> <pre><code>data_annotation\nloop_\n_coloring.label_asym_id\n_coloring.beg_label_seq_id\n_coloring.end_label_seq_id\n_coloring.color\nA   .   . '#00ff00'\nB   .   . 'blue'\nB 100 200 'skyblue'\nB 150 160 'lightblue'\n</code></pre> <p>An advantage of the CIF format is that it can include multiple annotation tables in the same file, organized into blocks and categories. Then the MVS file can reference individual tables using <code>block_header</code> (or <code>block_index</code>) and <code>category_name</code> parameters. The column containing the dependent variable can be specified using <code>field_name</code> parameter. In this case, we could use <code>\"block_header\": \"annotation\", \"category_name\": \"coloring\", \"field_name\": \"color\"</code>.</p>"},{"location":"annotations/#bcif-format","title":"BCIF format","text":"<p>This has exactly the same structure as the CIF format, but encoded using BinaryCIF.</p>"},{"location":"annotations/#referencing-mvs-annotations-in-mvs-tree","title":"Referencing MVS annotations in MVS tree","text":""},{"location":"annotations/#from-uri","title":"From URI","text":"<p>MVS annotations can be referenced in <code>color_from_uri</code>, <code>label_from_uri</code>, <code>tooltip_from_uri</code>, and <code>component_from_uri</code> nodes in MVS tree.</p> <p>For example this part of a MVS tree:</p> <pre><code>- representation {type: \"cartoon\"}\n  - color {selector: {label_asym_id: \"A\"}, color: \"#00ff00\"}\n  - color {selector: {label_asym_id: \"B\"}, color: \"blue\"}\n  - color {selector: {label_asym_id: \"B\", beg_label_seq_id: 100, end_label_seq_id: 200}, color: \"skyblue\"}\n  - color {selector: {label_asym_id: \"B\", beg_label_seq_id: 150, end_label_seq_id: 160}, color: \"lightblue\"}\n</code></pre> <p>can be replaced by:</p> <pre><code>- representation {type: \"cartoon\"}\n  - color_from_uri {uri: \"https://example.org/annotations.json\", format: \"json\", schema: \"residue_range\"}\n</code></pre> <p>assuming that the JSON annotation file shown in the previous section is available at <code>https://example.org/annotations.json</code>.</p>"},{"location":"annotations/#relative-uris","title":"Relative URIs","text":"<p>The <code>uri</code> parameter can also hold a URI reference (relative URI). In such cases, this URI reference is relative to the URI of the MVS file itself (e.g. if the MVS file is available from <code>https://example.org/spanish/inquisition/expectations.mvsj</code>, then the relative URI <code>./annotations.json</code> is equivalent to <code>https://example.org/spanish/inquisition/annotations.json</code>). This is however not applicable in all cases (e.g. the MVS tree can be constructed ad-hoc within a web application, therefore it has no URI; or the MVS file is loaded from a local disk using drag&amp;drop, therefore the relative location is not accessible by the browser).</p> <p>A special case is when the MVS tree is saved in MVSX format. An MVSX file is a ZIP archive containing the MVS tree in <code>index.mvsj</code> and possibly other files. In this case, the relative URIs will resolve to the files within the archive (e.g. <code>./annotations.json</code> points to the file <code>annotations.json</code> stored in the MSVX archive).</p>"},{"location":"annotations/#from-source","title":"From source","text":"<p>The MVS annotations can in fact be stored within the same mmCIF file from which the structure coordinates are loaded. To reference these annotations, we can use <code>color_from_source</code>, <code>label_from_source</code>, <code>tooltip_from_source</code>, and <code>component_from_source</code> nodes. Example:</p> <pre><code>- representation {type: \"cartoon\"}\n  - color_from_source {schema: \"residue_range\", block_header: \"annotation\", category_name: \"coloring\"}\n</code></pre>"},{"location":"annotations/#annotation-schemas","title":"Annotation schemas","text":"<p>The <code>schema</code> parameter of all <code>*_from_uri</code> and <code>*_from_source</code> nodes specifies the MVS annotation schema, i.e. a set of fields used to select a substructure. In the example above we are using <code>residue_range</code> schema, which uses columns <code>label_entity_id</code>, <code>label_asym_id</code>, <code>beg_label_seq_id</code>, and <code>end_label_seq_id</code>. (We didn't provide values for <code>label_entity_id</code>, so it is not taken into account even though the schema supports it).</p> <p>Table of selector field names supported by individual MVS annotation schemas:</p> Field \\ Schema whole_structure entity chain residue residue_range atom auth_chain auth_residue auth_residue_range auth_atom all_atomic label_entity_id X X X X X X label_asym_id X X X X X label_seq_id X X X beg_label_seq_id X X end_label_seq_id X X label_atom_id X X auth_asym_id X X X X X auth_seq_id X X X pdbx_PDB_ins_code X X X beg_auth_seq_id X X end_auth_seq_id X X auth_atom_id X X type_symbol X X X atom_id X X X atom_index X X X <p>To include all selector field names that are present in the annotation, one can use <code>\"schema\": \"all_atomic\"</code> (we could use it in the example above and the result would be the same). In future versions of MVS, non-atomic schemas might be added, to select parts of structures that are not composed of atoms, e.g. coarse models or geometric primitives.</p>"},{"location":"annotations/#group_id-field","title":"<code>group_id</code> field","text":"<p>The <code>group_id</code> field is a special field supported by all MVS annotation schemas. It does not change the sets of atoms selected by individual rows but instead groups annotation rows together to create more complex selections. This is useful when adding labels to our visualization.</p> <p>The following example (when applied via <code>label_from_uri</code> node) will create 7 separate labels, each bound to a single residue:</p> <pre><code>data_annotation\nloop_\n_labels.label_asym_id\n_labels.label_seq_id\n_labels.color\n_labels.label\nA 100 pink 'Substrate binding site'\nA 150 pink 'Substrate binding site'\nA 170 pink 'Substrate binding site'\nA 200 blue 'Inhibitor binding site'\nA 220 blue 'Inhibitor binding site'\nA 300 lime 'Glycosylation site'\nA 330 lime 'Glycosylation site'\n</code></pre> <p>On the other hand, the next example will only create 4 labels (\"Substrate binding site\" label bound to residues 100, 150, and 170; \"Inhibitor binding site\" label bound to residues 200 and 220; \"Glycosylation site\" label bound to residue 300; and \"Glycosylation site\" label bound to residue 330):</p> <pre><code>data_annotation\nloop_\n_labels.group_id\n_labels.label_asym_id\n_labels.label_seq_id\n_labels.color\n_labels.label\n1 A 100 pink 'Substrate binding site'\n1 A 150 pink 'Substrate binding site'\n1 A 170 pink 'Substrate binding site'\n2 A 200 blue 'Inhibitor binding site'\n2 A 220 blue 'Inhibitor binding site'\n. A 300 lime 'Glycosylation site'\n. A 330 lime 'Glycosylation site'\n</code></pre> <p>Note: Annotation rows with empty <code>group_id</code> field (<code>.</code> in CIF, ommitted field or <code>null</code> in JSON) are always treated as separate groups.</p> <p>Note 2: <code>group_id</code> field has no effect on colors, tooltips, components. It only makes any difference for labels.</p>"},{"location":"camera-settings/","title":"MVS camera settings","text":"<p>Camera position and orientation in MVS views can be adjusted in two ways: using a <code>camera</code> node or a <code>focus</code> node. Global attributes of the MVS view unrelated to camera positioning can be adjusted via a <code>canvas</code> node.</p>"},{"location":"camera-settings/#camera-node","title":"<code>camera</code> node","text":"<p>This node instructs to directly set the camera position and orientation. This is done by passing <code>target</code>, <code>position</code>, and optional <code>up</code> vector. The <code>camera</code> node is placed as a child of the <code>root</code> node (see MVS tree schema).</p> <p></p> <p>However, if the <code>target</code> and <code>position</code> vectors were interpreted directly, the resulting view would wildly depend on the camera field of view (FOV). For example, assume we have a sphere with center in the point [0,0,0] and radius 10 Angstroms, and we set <code>target=[0,0,0]</code> and <code>position=[0,0,20]</code>. With a camera with vertical FOV=90\u00b0, the sphere will fit into the camera's view nicely, with some margin above and under the sphere. But with a camera with vertical FOV=30\u00b0, the top and bottom of sphere will be cropped. To avoid these differences, MVS always uses position of a \"reference camera\" instead of the real camera position.</p> <p>We define the \"reference camera\" as a camera with such FOV that a sphere with radius R viewed from distance 2R (from the center of the sphere) will just fit into view (i.e. there will be no margin but the sphere will not be cropped). This happens to be FOV = 2 arcsin(1/2) = 60\u00b0 for perspective projection, and FOV = 2 arctan(1/2) \u2248 53\u00b0 for orthographic projection.</p> <p>When using perspective projection, the real camera distance from target and the real camera position can be calculated using these formulas:</p> <p>\\(d _\\mathrm{adj} = d _\\mathrm{ref} \\cdot \\frac{1}{2 \\sin(\\alpha/2)}\\)</p> <p>\\(\\mathbf{p} _\\mathrm{adj} = \\mathbf{t} + (\\mathbf{p} _\\mathrm{ref} - \\mathbf{t}) \\cdot \\frac{1}{2 \\sin(\\alpha/2)}\\)</p> <p>Where \\(\\alpha\\) is the vertical FOV of the real camera, \\(d _\\mathrm{ref}\\) is the reference camera distance from target, \\(d _\\mathrm{adj}\\) is the real (adjusted) camera distance from target, \\(\\mathbf{t}\\) is the target position, \\(\\mathbf{p} _\\mathrm{ref}\\) is the reference camera position (the value in the MVS file), and \\(\\mathbf{p} _\\mathrm{adj}\\) is the real (adjusted) camera position.</p> <p>When using orthographic projection, the formulas are slightly different:</p> <p>\\(d _\\mathrm{adj} = d _\\mathrm{ref} \\cdot \\frac{1}{2 \\tan(\\alpha/2)}\\)</p> <p>\\(\\mathbf{p} _\\mathrm{adj} = \\mathbf{t} + (\\mathbf{p} _\\mathrm{ref} - \\mathbf{t}) \\cdot \\frac{1}{2 \\tan(\\alpha/2)}\\)</p> <p>The following image illustrates the camera position adjustment (left: reference camera with FOV=60\u00b0, right: real camera with FOV=30\u00b0 must be positioned further from the target to obtain a similar view):</p> <p></p> <p>Using the example above (<code>target=[0,0,0]</code> and <code>position=[0,0,20]</code>), we can calculate that the real camera position will have to be set to:</p> <ul> <li>[0, 0, 14.14] for FOV=90\u00b0 (perspective projection)</li> <li>[0, 0, 20] for FOV=60\u00b0 (perspective projection)</li> <li>[0, 0, 38.68] for FOV=30\u00b0 (perspective projection)</li> </ul> <p>Note that for orthographic projection this adjustment achieves that the resulting view does not depend on the FOV value. For perspective projection, this is not possible and there will always be some \"fisheye effect\", but still it greatly reduces the dependence on FOV and avoids the too-much-zoomed-in and too-much-zoomed-out views when FOV changes.</p> <p>The <code>up</code> vector describes how the camera should be rotated around the position-target axis, i.e. it is the vector in 3D space that will be point up when projected on the screen. For this, the <code>up</code> vector must be perpendicular to the position-target axis. However, the MVS specification does not require that the provided <code>up</code> vector be perpendicular. This can be solved by a simple adjustment:</p> <p>\\(\\mathbf{u} _\\mathrm{adj} = \\mathrm{normalize} ( ((\\mathbf{t}-\\mathbf{p}) \\times \\mathbf{u}) \\times (\\mathbf{t}-\\mathbf{p}) )\\)</p> <p>Where \\(\\mathbf{u}\\) is the unadjusted up vector (the value in the MVS file), \\(\\mathbf{u} _\\mathrm{adj}\\) is the adjusted up vector, \\(\\mathbf{t}\\) is the target position, and \\(\\mathbf{p}\\) is the camera position (can be either reference or adjusted camera position, the result will be the same).</p> <p>If the up vector parameter is not provided, the default value ([0, 1, 0]) will be used (after adjustment).</p>"},{"location":"camera-settings/#focus-node","title":"<code>focus</code> node","text":"<p>The other way to adjust camera is to use a <code>focus</code> node. This node is placed as a child of a <code>component</code> node and instructs to set focus to the parent component (zoom in). This means that the camera target should be set to the center of the bounding sphere of the component, and the camera position should be set so that the bounding sphere just fits into view (vertically and horizontally).</p> <p>By default, the camera will be oriented so that the X axis points right, the Y axis points up, and the Z axis points towards the observer. This orientation can be changed using the optional vector parameters <code>direction</code> and <code>up</code> (see MVS tree schema). The <code>direction</code> vector describes the direction from the camera position towards the target position (default [0, 0, -1]). The meaning of the <code>up</code> vector is the same as for the <code>camera</code> node and the same adjustment applies to it (default [0, 1, 0]).</p> <p>The reference camera position for a <code>focus</code> node can be calculated as follows:</p> <p>\\(\\mathbf{p} _\\mathrm{ref} = \\mathbf{t} - \\mathrm{normalize}(\\mathbf{d}) \\cdot 2 r \\cdot \\max(1, \\frac{h}{w})\\)</p> <p>Where \\(\\mathbf{t}\\) is the target position (center of the bounding sphere of the component), \\(r\\) is the radius of the bounding sphere of the component, \\(\\mathbf{d}\\) is the direction vector, \\(h\\) is the height of the viewport, \\(w\\) is the width of the viewport, and \\(\\mathbf{p} _\\mathrm{ref}\\) is the reference camera position (see explanation above).</p> <p>The following image illustrates the camera position calculation to fit the bounding sphere of a structure:</p> <p></p> <p>Applying the FOV-adjustment formulas from the previous section, we can easily calculate the real position that we have to set to the camera (\\(\\mathbf{p} _\\mathrm{adj}\\)):</p> <p>For perspective projection: \\(\\mathbf{p} _\\mathrm{adj} = \\mathbf{t} - \\mathrm{normalize}(\\mathbf{d}) \\cdot \\frac{r}{\\sin(\\alpha/2)} \\cdot \\max(1, \\frac{h}{w})\\)</p> <p>For orthographic projection: \\(\\mathbf{p} _\\mathrm{adj} = \\mathbf{t} - \\mathrm{normalize}(\\mathbf{d}) \\cdot \\frac{r}{\\tan(\\alpha/2)} \\cdot \\max(1, \\frac{h}{w})\\)</p>"},{"location":"camera-settings/#canvas-node","title":"<code>canvas</code> node","text":"<p>Attributes that apply to the MVS view as a whole, but are not related to camera positioning, can be set using a <code>canvas</code> node. This node is placed as a child of the <code>root</code> node (see MVS tree schema).</p> <p>Currently, this only includes one parameter: <code>background_color</code>. Its value can be set to either a X11 color (e.g. <code>\"red\"</code>), or a hexadecimal color code (e.g. <code>\"#FF0011\"</code>). If there is no <code>canvas</code> node, the background will be white.</p>"},{"location":"demos/","title":"Demonstrations","text":"<p>The following demos showcase how MolViewSpec helps with creating interactive stories and visualizations.</p>"},{"location":"demos/#molviewspec-stories","title":"MolViewSpec Stories","text":"<p>The combination of MolViewSpec and Mol* makes it easy to define engaging, interactive molecular stories, as showcased  with the following two examples. Their source code can be found here.</p>"},{"location":"demos/#molviewspec-story-abl-kinase","title":"MolViewSpec Story: ABL Kinase","text":"<p>BCR-ABL is a classic case of how structural biology can drive drug discovery. This story will help you  understand the role of BCR-ABL in chronic myeloid leukemia and how the drug Imatinib works.</p> <p></p>"},{"location":"demos/#molviewspec-story-tata-binding-protein","title":"MolViewSpec Story: TATA-Binding Protein","text":"<p>Specialized DNA sequences next to genes, called promoters, define the proper start site and direction for transcription. In eukaryotic cells, a complex promoter system ensures that the proper RNA polymerase is targeted to each gene. The TATA-binding protein (TBP) is the central element of this system.</p> <p></p>"},{"location":"demos/#ihm-restraints","title":"I/HM Restraints","text":"<p>Visualize structural restraints for integrated hybrid models (I/HM). The source code can be found  here.</p> <p></p>"},{"location":"primitives/","title":"MolViewSpec primitives","text":"<p>MolViewSpec supports geometric primitives such as circles, arrows, tubes etc. These can be freely added to scenes as  needed and provide a powerful tool to add custom annotations. Primitives usually require that one or more positions are  defined, which can be done by providing 3D vectors or by leveraging Selectors. Selectors can reference the position of specific atoms or residues without requiring you to manually obtain their 3D coordinates.</p>"},{"location":"primitives/#custom-visuals-using-3d-vectors","title":"Custom visuals using 3D vectors","text":"<p>Acquire a builder instance as usual. Call <code>.primitives</code> to enter the primitives mode and start defining one or more  geometric shapes. You can customize the visuals of all primitives at this stage as well and make e.g. everything  semi-transparent.  <pre><code>builder = create_builder()\nbuilder.primitives(opacity=0.66)\n</code></pre></p> <p>A range of functions are available to define:  <code>mesh | lines | tube | arrow | distance | angle | label | ellipse | ellipsoid | sphere | box</code>.</p> <p>Most of them expect positions to be provided to define start and end point or the direction/orientation of a shape. Each shape can be further customized using representation-specific parameters.</p> <pre><code>.arrow(\n    start=(1, 1, 1),\n    direction=(0, 2.2, 0),\n    tube_radius=0.05,\n    show_end_cap=True,\n    color=\"#ff00ff\",\n    tooltip=\"Y\",\n)\n</code></pre>"},{"location":"primitives/#combining-primitives-with-componentexpression-selections","title":"Combining primitives with <code>ComponentExpression</code> selections","text":"<p>Selectors are compatible with this part of the API, allowing you to reference the spatial coordinates of parts of a structure without the need of obtaining their 3D positional data explicitly.</p> <p>The following example showcases how a <code>ComponentExpression</code> is used to defined start and end point of a distance  measurement that will add a dashed length between both referenced residues and label it with the computed distance  between the two residues.</p> <pre><code>builder = create_builder()\nstructure = builder.download(url=_url_for_mmcif(\"1tqn\")).parse(format=\"mmcif\").model_structure()\n(structure.component(selector=\"polymer\").representation().color(color=\"blue\"))\n(\n    structure.component(selector=[ComponentExpression(auth_seq_id=258), ComponentExpression(auth_seq_id=508)])\n    .representation(type=\"ball_and_stick\")\n    .color(color=\"green\")\n)\n</code></pre> <p>The following snippet creates primitives in the context of this structure.</p> <pre><code>structure.primitives()\n.distance(\n    start=ComponentExpression(auth_seq_id=258),\n    end=ComponentExpression(auth_seq_id=508),\n    color=\"red\",\n    radius=0.1,\n    dash_length=0.1,\n    label_template=\"Distance: {{distance}}\",\n    label_color=\"red\",\n)\n</code></pre>"},{"location":"primitives/#using-references","title":"Using references","text":"<p>More complex cases will involve multiple structures. <code>ComponentExpression</code> can be tied to specific structures using  explicit references. This allows e.g. to distance measurements between two distinct structures. </p> <p>This example loads two structures: 1tqn and 1cbs. Note the <code>.model_structure(ref=\"X\")</code> invocations that assign a  user-defined reference to each structures. This allows pointing to these structures as <code>X</code> and <code>Y</code> when defining  primitives using Selectors.</p> <pre><code>builder = create_builder()\n_1tqn = builder.download(url=_url_for_mmcif(\"1tqn\")).parse(format=\"mmcif\").model_structure(ref=\"X\")\n_1tqn.component(selector=\"polymer\").representation().color(color=\"blue\")\n(\n    _1tqn.component(selector=ComponentExpression(auth_seq_id=508))\n    .representation(type=\"ball_and_stick\")\n    .color(color=\"green\")\n)\n\n_1cbs = builder.download(url=_url_for_mmcif(\"1cbs\")).parse(format=\"mmcif\").model_structure(ref=\"Y\")\n_1cbs.component(selector=\"polymer\").representation().color(color=\"blue\")\n(\n    _1cbs.component(selector=ComponentExpression(auth_seq_id=200))\n    .representation(type=\"ball_and_stick\")\n    .color(color=\"green\")\n)\n</code></pre> <p>Now, individual sequence positions can be used as value for the start and end position of this distance measurement  despite them coming from separate structures.</p> <pre><code>(\n    builder.primitives().distance(\n        start=PrimitiveComponentExpressions(structure_ref=\"X\", expressions=[ComponentExpression(auth_seq_id=508)]),\n        end=PrimitiveComponentExpressions(structure_ref=\"Y\", expressions=[ComponentExpression(auth_seq_id=200)]),\n        color=\"purple\",\n        radius=1,\n        dash_length=1,\n        label_template=\"Ligand Distance: {{distance}}\",\n        label_color=\"red\",\n    )\n)\n</code></pre> <p></p>"},{"location":"selectors/","title":"MolViewSpec selectors","text":"<p>Selectors are used in MVS to define substructures (components) and apply colors, labels, or tooltips to them. MVS nodes that take a <code>selector</code> parameter are <code>component</code> (creates a component from the parent <code>structure</code> node) and <code>color</code> (applies coloring to a part of the parent <code>representation</code> node).</p> <p>There are three kinds of selectors:</p> <ul> <li> <p>Static selector is a string that selects a part of the structure based on entity type. The supported static selectors are these:</p> <p><code>\"all\", \"polymer\", \"protein\", \"nucleic\", \"branched\", \"ligand\", \"ion\", \"water\"</code></p> </li> <li> <p>Component expression is an object that selects a set of atoms based on their properties like chain identifier, residue number, or type symbol. The type of a component expression object is:</p> <pre><code>{\n    label_entity_id?: str,    // Entity identifier\n    label_asym_id?: str,      // Chain identifier in label_* numbering\n    auth_asym_id?: str,       // Chain identifier in auth_* numbering\n    label_seq_id?: int,       // Residue number in label_* numbering\n    auth_seq_id?: int,        // Residue number in auth_* numbering\n    pdbx_PDB_ins_code?: str,  // PDB insertion code\n    beg_label_seq_id?: int,   // Minimum label_seq_id (inclusive), leave blank to start from the beginning of the chain\n    end_label_seq_id?: int,   // Maximum label_seq_id (inclusive), leave blank to go to the end of the chain\n    beg_auth_seq_id?: int,    // Minimum auth_seq_id (inclusive), leave blank to start from the beginning of the chain\n    end_auth_seq_id?: int,    // Maximum auth_seq_id (inclusive), leave blank to go to the end of the chain\n    label_atom_id?: str,      // Atom name like 'CA', 'N', 'O', in label_* numbering\n    auth_atom_id?: str,       // Atom name like 'CA', 'N', 'O', in auth_* numbering\n    type_symbol?: str,        // Element symbol like 'H', 'HE', 'LI', 'BE'\n    atom_id?: int,            // Unique atom identifier (_atom_site.id)\n    atom_index?: int,         // 0-based index of the atom in the source data\n}\n</code></pre> <p>A component expression can include any combination of the fields. An expression with multiple fields selects atoms that fulfill all fields at the same time. Examples:</p> <pre><code>// Select whole chain A\nselector: { label_asym_id: 'A' }\n\n// Select residues 100 to 200 (inclusive) in chain B\nselector: { label_asym_id: 'B', beg_label_seq_id: 100, end_label_seq_id: 200 }\n\n// Select C-alpha atoms in residue 100 (using auth_* numbering) of any chain\nselector: { auth_seq_id: 100, type_symbol: 'C', auth_atom_id: 'CA' }\n</code></pre> </li> <li> <p>Union component expression is an array of simple component expressions. A union component expression is interpreted as set union, i.e. it selects all atoms that fulfill at least one of the expressions in the array. Example:</p> <pre><code>// Select chains A, B, and C\nselector: [{ label_asym_id: 'A' }, { label_asym_id: 'B' }, { label_asym_id: 'C' }];\n\n// Select residues up to 100 (inclusive) in chain A plus all magnesium atoms\nselector: [{ label_asym_id: 'A', end_label_seq_id: 100 }, { type_symbol: 'MG' }];\n</code></pre> </li> </ul> <p>Component expressions can be applied to primitives as well. Furthermore, a <code>ref</code> can be provided to make selections with a specific node when working e.g. with multiple structures. Any MVS node allows you to set an anchor:</p> <pre><code>builder.download(url=url).parse(format=\"mmcif\").model_structure(ref=\"X\")\n</code></pre> <p>This <code>ref</code> can then be referenced in the context of a selection:</p> <pre><code>PrimitiveComponentExpressions(structure_ref=\"X\", expressions=[ComponentExpression(auth_seq_id=508)])\n</code></pre> <p>An alternative to using selectors is using MVS annotations. This means defining the selections in a separate file and referencing them from the MVS file.</p>"},{"location":"tree-schema/","title":"MolViewSpec tree schema v1","text":"<p>This is the exhaustive list of MolViewSpec node kinds, their parameters, and parent-child relationships. Parameters with <code>?:</code> are optional, i.e. they may be omitted, meaning that the default value should be used. Parameters with <code>:</code> are required, i.e. omitting them will result in an invalid MolViewSpec tree.</p> <p>This specification is formalized by the OpenAPI JSON schema.</p> <p>(This document was auto-generated by <code>node lib/commonjs/cli/mvs/mvs-print-schema --markdown</code> in Mol*.)</p>"},{"location":"tree-schema/#root","title":"<code>root</code>","text":"<p>[Root of the tree must be of this kind]</p> <p>Auxiliary node kind that only appears as the tree root.</p> <p>Parent: none</p> <p>Params:</p>"},{"location":"tree-schema/#download","title":"<code>download</code>","text":"<p>This node instructs to retrieve a data resource.</p> <p>Parent: <code>root</code></p> <p>Params:</p> <ul> <li><code>url:</code><code>string</code></li> </ul> <p>URL of the data resource.</p>"},{"location":"tree-schema/#parse","title":"<code>parse</code>","text":"<p>This node instructs to parse a data resource.</p> <p>Parent: <code>download</code></p> <p>Params:</p> <ul> <li><code>format:</code><code>\"mmcif\" | \"bcif\" | \"pdb\" | \"map\"</code></li> </ul> <p>Format of the input data resource.</p>"},{"location":"tree-schema/#structure","title":"<code>structure</code>","text":"<p>This node instructs to create a structure from a parsed data resource. \"Structure\" refers to an internal representation of molecular coordinates without any visual representation.</p> <p>Parent: <code>parse</code></p> <p>Params:</p> <ul> <li><code>type:</code><code>\"model\" | \"assembly\" | \"symmetry\" | \"symmetry_mates\"</code></li> </ul> <p>Type of structure to be created (<code>\"model\"</code> for original model coordinates, <code>\"assembly\"</code> for assembly structure, <code>\"symmetry\"</code> for a set of crystal unit cells based on Miller indices, <code>\"symmetry_mates\"</code> for a set of asymmetric units within a radius from the original model).</p> <ul> <li><code>block_header?:</code><code>string | null</code></li> </ul> <p>Header of the CIF block to read coordinates from (only applies when the input data are from CIF or BinaryCIF). If <code>null</code>, block is selected based on <code>block_index</code>.</p> <p>Default: <code>null</code></p> <ul> <li><code>block_index?:</code><code>Integer</code></li> </ul> <p>0-based index of the CIF block to read coordinates from (only applies when the input data are from CIF or BinaryCIF and <code>block_header</code> is <code>null</code>).</p> <p>Default: <code>0</code></p> <ul> <li><code>model_index?:</code><code>Integer</code></li> </ul> <p>0-based index of model in case the input data contain multiple models.</p> <p>Default: <code>0</code></p> <ul> <li><code>assembly_id?:</code><code>string | null</code></li> </ul> <p>Assembly identifier (only applies when <code>kind</code> is <code>\"assembly\"</code>). If <code>null</code>, the first assembly is selected.</p> <p>Default: <code>null</code></p> <ul> <li><code>radius?:</code><code>number</code></li> </ul> <p>Distance (in Angstroms) from the original model in which asymmetric units should be included (only applies when <code>kind</code> is <code>\"symmetry_mates\"</code>).</p> <p>Default: <code>5</code></p> <ul> <li><code>ijk_min?:</code><code>[Integer, Integer, Integer]</code></li> </ul> <p>Miller indices of the bottom-left unit cell to be included (only applies when <code>kind</code> is <code>\"symmetry\"</code>).</p> <p>Default: <code>[-1, -1, -1]</code></p> <ul> <li><code>ijk_max?:</code><code>[Integer, Integer, Integer]</code></li> </ul> <p>Miller indices of the top-right unit cell to be included (only applies when <code>kind</code> is <code>\"symmetry\"</code>).</p> <p>Default: <code>[1, 1, 1]</code></p>"},{"location":"tree-schema/#transform","title":"<code>transform</code>","text":"<p>This node instructs to rotate and/or translate structure coordinates.</p> <p>Parent: <code>structure</code></p> <p>Params:</p> <ul> <li><code>rotation?:</code><code>Array&lt;number&gt;</code></li> </ul> <p>Rotation matrix (3x3 matrix flattened in column major format (j*3+i indexing), this is equivalent to Fortran-order in numpy). This matrix will multiply the structure coordinates from the left. The default value is the identity matrix (corresponds to no rotation).</p> <p>Default: <code>[1, 0, 0, 0, 1, 0, 0, 0, 1]</code></p> <ul> <li><code>translation?:</code><code>[number, number, number]</code></li> </ul> <p>Translation vector, applied to the structure coordinates after rotation. The default value is the zero vector (corresponds to no translation).</p> <p>Default: <code>[0, 0, 0]</code></p>"},{"location":"tree-schema/#component","title":"<code>component</code>","text":"<p>This node instructs to create a component (i.e. a subset of the parent structure).</p> <p>Parent: <code>structure</code></p> <p>Params:</p> <ul> <li><code>selector:</code><code>(\"all\" | \"polymer\" | \"protein\" | \"nucleic\" | \"branched\" | \"ligand\" | \"ion\" | \"water\" | \"coarse\") | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt;</code></li> </ul> <p>Defines what part of the parent structure should be included in this component.</p>"},{"location":"tree-schema/#component_from_uri","title":"<code>component_from_uri</code>","text":"<p>This node instructs to create a component defined by an external annotation resource.</p> <p>Parent: <code>structure</code></p> <p>Params:</p> <ul> <li><code>uri:</code><code>string</code></li> </ul> <p>URL of the annotation resource.</p> <ul> <li><code>format:</code><code>\"cif\" | \"bcif\" | \"json\"</code></li> </ul> <p>Format of the annotation resource.</p> <ul> <li><code>schema:</code><code>\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"</code></li> </ul> <p>Annotation schema defines what fields in the annotation will be taken into account.</p> <ul> <li><code>block_header?:</code><code>string | null</code></li> </ul> <p>Header of the CIF block to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code>). If <code>null</code>, block is selected based on <code>block_index</code>.</p> <p>Default: <code>null</code></p> <ul> <li><code>block_index?:</code><code>Integer</code></li> </ul> <p>0-based index of the CIF block to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code> and <code>block_header</code> is <code>null</code>).</p> <p>Default: <code>0</code></p> <ul> <li><code>category_name?:</code><code>string | null</code></li> </ul> <p>Name of the CIF category to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code>). If <code>null</code>, the first category in the block is used.</p> <p>Default: <code>null</code></p> <ul> <li><code>field_name?:</code><code>string</code></li> </ul> <p>Name of the column in CIF or field name (key) in JSON that contains the component identifier.</p> <p>Default: <code>\"component\"</code></p> <ul> <li><code>field_values?:</code><code>Array&lt;string&gt; | null</code></li> </ul> <p>List of component identifiers (i.e. values in the field given by <code>field_name</code>) which should be included in this component. If <code>null</code>, component identifiers are ignored (all annotation rows are included), and <code>field_name</code> field can be dropped from the annotation.</p> <p>Default: <code>null</code></p>"},{"location":"tree-schema/#component_from_source","title":"<code>component_from_source</code>","text":"<p>This node instructs to create a component defined by an annotation resource included in the same file this structure was loaded from. Only applicable if the structure was loaded from an mmCIF or BinaryCIF file.</p> <p>Parent: <code>structure</code></p> <p>Params:</p> <ul> <li><code>schema:</code><code>\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"</code></li> </ul> <p>Annotation schema defines what fields in the annotation will be taken into account.</p> <ul> <li><code>block_header?:</code><code>string | null</code></li> </ul> <p>Header of the CIF block to read annotation from. If <code>null</code>, block is selected based on <code>block_index</code>.</p> <p>Default: <code>null</code></p> <ul> <li><code>block_index?:</code><code>Integer</code></li> </ul> <p>0-based index of the CIF block to read annotation from (only applies when <code>block_header</code> is <code>null</code>).</p> <p>Default: <code>0</code></p> <ul> <li><code>category_name?:</code><code>string | null</code></li> </ul> <p>Name of the CIF category to read annotation from. If <code>null</code>, the first category in the block is used.</p> <p>Default: <code>null</code></p> <ul> <li><code>field_name?:</code><code>string</code></li> </ul> <p>Name of the column in CIF or field name (key) in JSON that contains the component identifier.</p> <p>Default: <code>\"component\"</code></p> <ul> <li><code>field_values?:</code><code>Array&lt;string&gt; | null</code></li> </ul> <p>List of component identifiers (i.e. values in the field given by <code>field_name</code>) which should be included in this component. If <code>null</code>, component identifiers are ignored (all annotation rows are included), and <code>field_name</code> field can be dropped from the annotation.</p> <p>Default: <code>null</code></p>"},{"location":"tree-schema/#representation","title":"<code>representation</code>","text":"<p>This node instructs to create a visual representation of a component.</p> <p>Parent: <code>component</code> or <code>component_from_uri</code> or <code>component_from_source</code></p> <p>Params:</p> <ul> <li><code>type:</code><code>cartoon | ball_and_stick | spacefill | carbohydrate | surface</code></li> </ul> <p>Representation type</p> <p>[This parameter determines the rest of parameters]</p> <p>Case <code>type: \"cartoon\"</code>:</p> <ul> <li> <p><code>size_factor?:</code><code>number</code></p> <p>Scales the corresponding visuals.</p> <p>Default: <code>1</code></p> </li> <li> <p><code>tubular_helices?:</code><code>boolean</code></p> <p>Simplify corkscrew helices to tubes.</p> <p>Default: <code>false</code></p> </li> </ul> <p>Case <code>type: \"ball_and_stick\"</code>:</p> <ul> <li> <p><code>size_factor?:</code><code>number</code></p> <p>Scales the corresponding visuals.</p> <p>Default: <code>1</code></p> </li> <li> <p><code>ignore_hydrogens?:</code><code>boolean</code></p> <p>Controls whether hydrogen atoms are drawn.</p> <p>Default: <code>false</code></p> </li> </ul> <p>Case <code>type: \"spacefill\"</code>:</p> <ul> <li> <p><code>size_factor?:</code><code>number</code></p> <p>Scales the corresponding visuals.</p> <p>Default: <code>1</code></p> </li> <li> <p><code>ignore_hydrogens?:</code><code>boolean</code></p> <p>Controls whether hydrogen atoms are drawn.</p> <p>Default: <code>false</code></p> </li> </ul> <p>Case <code>type: \"carbohydrate\"</code>:</p> <ul> <li> <p><code>size_factor?:</code><code>number</code></p> <p>Scales the corresponding visuals.</p> <p>Default: <code>1</code></p> </li> </ul> <p>Case <code>type: \"surface\"</code>:</p> <ul> <li> <p><code>size_factor?:</code><code>number</code></p> <p>Scales the corresponding visuals.</p> <p>Default: <code>1</code></p> </li> <li> <p><code>ignore_hydrogens?:</code><code>boolean</code></p> <p>Controls whether hydrogen atoms are drawn.</p> <p>Default: <code>false</code></p> </li> </ul>"},{"location":"tree-schema/#volume","title":"<code>volume</code>","text":"<p>This node instructs to create a volume from a parsed data resource. \"Volume\" refers to an internal representation of volumetric data without any visual representation.</p> <p>Parent: <code>parse</code></p> <p>Params:</p> <ul> <li><code>channel_id?:</code><code>string | null</code></li> </ul> <p>Channel identifier (only applies when the input data contain multiple channels).</p> <p>Default: <code>null</code></p>"},{"location":"tree-schema/#volume_representation","title":"<code>volume_representation</code>","text":"<p>This node instructs to create a visual representation of a volume.</p> <p>Parent: <code>volume</code></p> <p>Params:</p> <ul> <li><code>type:</code><code>isosurface</code></li> </ul> <p>Representation type</p> <p>[This parameter determines the rest of parameters]</p> <p>Case <code>type: \"isosurface\"</code>:</p> <ul> <li> <p><code>relative_isovalue?:</code><code>number | null</code></p> <p>Relative isovalue.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>absolute_isovalue?:</code><code>number | null</code></p> <p>Absolute isovalue. Overrides <code>relative_isovalue</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>show_wireframe?:</code><code>boolean</code></p> <p>Show mesh wireframe. Defaults to false.</p> <p>Default: <code>false</code></p> </li> <li> <p><code>show_faces?:</code><code>boolean</code></p> <p>Show mesh faces. Defaults to true.</p> <p>Default: <code>true</code></p> </li> </ul>"},{"location":"tree-schema/#color","title":"<code>color</code>","text":"<p>This node instructs to apply color to a visual representation.</p> <p>Parent: <code>representation</code> or <code>volume_representation</code></p> <p>Params:</p> <ul> <li><code>color?:</code><code>ColorName | HexColor</code></li> </ul> <p>Color to apply to the representation. Can be either an X11 color name (e.g. <code>\"red\"</code>) or a hexadecimal code (e.g. <code>\"#FF0011\"</code>).</p> <p>Default: <code>\"white\"</code></p> <ul> <li><code>selector?:</code><code>(\"all\" | \"polymer\" | \"protein\" | \"nucleic\" | \"branched\" | \"ligand\" | \"ion\" | \"water\" | \"coarse\") | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt;</code></li> </ul> <p>Defines to what part of the representation this color should be applied.</p> <p>Default: <code>\"all\"</code></p>"},{"location":"tree-schema/#color_from_uri","title":"<code>color_from_uri</code>","text":"<p>This node instructs to apply colors to a visual representation. The colors are defined by an external annotation resource.</p> <p>Parent: <code>representation</code></p> <p>Params:</p> <ul> <li><code>uri:</code><code>string</code></li> </ul> <p>URL of the annotation resource.</p> <ul> <li><code>format:</code><code>\"cif\" | \"bcif\" | \"json\"</code></li> </ul> <p>Format of the annotation resource.</p> <ul> <li><code>schema:</code><code>\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"</code></li> </ul> <p>Annotation schema defines what fields in the annotation will be taken into account.</p> <ul> <li><code>block_header?:</code><code>string | null</code></li> </ul> <p>Header of the CIF block to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code>). If <code>null</code>, block is selected based on <code>block_index</code>.</p> <p>Default: <code>null</code></p> <ul> <li><code>block_index?:</code><code>Integer</code></li> </ul> <p>0-based index of the CIF block to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code> and <code>block_header</code> is <code>null</code>).</p> <p>Default: <code>0</code></p> <ul> <li><code>category_name?:</code><code>string | null</code></li> </ul> <p>Name of the CIF category to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code>). If <code>null</code>, the first category in the block is used.</p> <p>Default: <code>null</code></p> <ul> <li><code>field_name?:</code><code>string</code></li> </ul> <p>Name of the column in CIF or field name (key) in JSON that contains the color.</p> <p>Default: <code>\"color\"</code></p>"},{"location":"tree-schema/#color_from_source","title":"<code>color_from_source</code>","text":"<p>This node instructs to apply colors to a visual representation. The colors are defined by an annotation resource included in the same file this structure was loaded from. Only applicable if the structure was loaded from an mmCIF or BinaryCIF file.</p> <p>Parent: <code>representation</code></p> <p>Params:</p> <ul> <li><code>schema:</code><code>\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"</code></li> </ul> <p>Annotation schema defines what fields in the annotation will be taken into account.</p> <ul> <li><code>block_header?:</code><code>string | null</code></li> </ul> <p>Header of the CIF block to read annotation from. If <code>null</code>, block is selected based on <code>block_index</code>.</p> <p>Default: <code>null</code></p> <ul> <li><code>block_index?:</code><code>Integer</code></li> </ul> <p>0-based index of the CIF block to read annotation from (only applies when <code>block_header</code> is <code>null</code>).</p> <p>Default: <code>0</code></p> <ul> <li><code>category_name?:</code><code>string | null</code></li> </ul> <p>Name of the CIF category to read annotation from. If <code>null</code>, the first category in the block is used.</p> <p>Default: <code>null</code></p> <ul> <li><code>field_name?:</code><code>string</code></li> </ul> <p>Name of the column in CIF or field name (key) in JSON that contains the color.</p> <p>Default: <code>\"color\"</code></p>"},{"location":"tree-schema/#opacity","title":"<code>opacity</code>","text":"<p>This node instructs to apply opacity/transparency to a visual representation.</p> <p>Parent: <code>representation</code> or <code>volume_representation</code></p> <p>Params:</p> <ul> <li><code>opacity:</code><code>number</code></li> </ul> <p>Opacity of a representation. 0.0: fully transparent, 1.0: fully opaque.</p>"},{"location":"tree-schema/#label","title":"<code>label</code>","text":"<p>This node instructs to add a label (textual visual representation) to a component.</p> <p>Parent: <code>component</code> or <code>component_from_uri</code> or <code>component_from_source</code></p> <p>Params:</p> <ul> <li><code>text:</code><code>string</code></li> </ul> <p>Content of the shown label.</p>"},{"location":"tree-schema/#label_from_uri","title":"<code>label_from_uri</code>","text":"<p>This node instructs to add labels (textual visual representations) to parts of a structure. The labels are defined by an external annotation resource.</p> <p>Parent: <code>structure</code></p> <p>Params:</p> <ul> <li><code>uri:</code><code>string</code></li> </ul> <p>URL of the annotation resource.</p> <ul> <li><code>format:</code><code>\"cif\" | \"bcif\" | \"json\"</code></li> </ul> <p>Format of the annotation resource.</p> <ul> <li><code>schema:</code><code>\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"</code></li> </ul> <p>Annotation schema defines what fields in the annotation will be taken into account.</p> <ul> <li><code>block_header?:</code><code>string | null</code></li> </ul> <p>Header of the CIF block to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code>). If <code>null</code>, block is selected based on <code>block_index</code>.</p> <p>Default: <code>null</code></p> <ul> <li><code>block_index?:</code><code>Integer</code></li> </ul> <p>0-based index of the CIF block to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code> and <code>block_header</code> is <code>null</code>).</p> <p>Default: <code>0</code></p> <ul> <li><code>category_name?:</code><code>string | null</code></li> </ul> <p>Name of the CIF category to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code>). If <code>null</code>, the first category in the block is used.</p> <p>Default: <code>null</code></p> <ul> <li><code>field_name?:</code><code>string</code></li> </ul> <p>Name of the column in CIF or field name (key) in JSON that contains the label text.</p> <p>Default: <code>\"label\"</code></p>"},{"location":"tree-schema/#label_from_source","title":"<code>label_from_source</code>","text":"<p>This node instructs to add labels (textual visual representations) to parts of a structure. The labels are defined by an annotation resource included in the same file this structure was loaded from. Only applicable if the structure was loaded from an mmCIF or BinaryCIF file.</p> <p>Parent: <code>structure</code></p> <p>Params:</p> <ul> <li><code>schema:</code><code>\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"</code></li> </ul> <p>Annotation schema defines what fields in the annotation will be taken into account.</p> <ul> <li><code>block_header?:</code><code>string | null</code></li> </ul> <p>Header of the CIF block to read annotation from. If <code>null</code>, block is selected based on <code>block_index</code>.</p> <p>Default: <code>null</code></p> <ul> <li><code>block_index?:</code><code>Integer</code></li> </ul> <p>0-based index of the CIF block to read annotation from (only applies when <code>block_header</code> is <code>null</code>).</p> <p>Default: <code>0</code></p> <ul> <li><code>category_name?:</code><code>string | null</code></li> </ul> <p>Name of the CIF category to read annotation from. If <code>null</code>, the first category in the block is used.</p> <p>Default: <code>null</code></p> <ul> <li><code>field_name?:</code><code>string</code></li> </ul> <p>Name of the column in CIF or field name (key) in JSON that contains the label text.</p> <p>Default: <code>\"label\"</code></p>"},{"location":"tree-schema/#tooltip","title":"<code>tooltip</code>","text":"<p>This node instructs to add a tooltip to a component. \"Tooltip\" is a text which is not a part of the visualization but should be presented to the users when they interact with the component (typically, the tooltip will be shown somewhere on the screen when the user hovers over a visual representation of the component).</p> <p>Parent: <code>component</code> or <code>component_from_uri</code> or <code>component_from_source</code></p> <p>Params:</p> <ul> <li><code>text:</code><code>string</code></li> </ul> <p>Content of the shown tooltip.</p>"},{"location":"tree-schema/#tooltip_from_uri","title":"<code>tooltip_from_uri</code>","text":"<p>This node instructs to add tooltips to parts of a structure. The tooltips are defined by an external annotation resource.</p> <p>Parent: <code>structure</code></p> <p>Params:</p> <ul> <li><code>uri:</code><code>string</code></li> </ul> <p>URL of the annotation resource.</p> <ul> <li><code>format:</code><code>\"cif\" | \"bcif\" | \"json\"</code></li> </ul> <p>Format of the annotation resource.</p> <ul> <li><code>schema:</code><code>\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"</code></li> </ul> <p>Annotation schema defines what fields in the annotation will be taken into account.</p> <ul> <li><code>block_header?:</code><code>string | null</code></li> </ul> <p>Header of the CIF block to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code>). If <code>null</code>, block is selected based on <code>block_index</code>.</p> <p>Default: <code>null</code></p> <ul> <li><code>block_index?:</code><code>Integer</code></li> </ul> <p>0-based index of the CIF block to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code> and <code>block_header</code> is <code>null</code>).</p> <p>Default: <code>0</code></p> <ul> <li><code>category_name?:</code><code>string | null</code></li> </ul> <p>Name of the CIF category to read annotation from (only applies when <code>format</code> is <code>\"cif\"</code> or <code>\"bcif\"</code>). If <code>null</code>, the first category in the block is used.</p> <p>Default: <code>null</code></p> <ul> <li><code>field_name?:</code><code>string</code></li> </ul> <p>Name of the column in CIF or field name (key) in JSON that contains the tooltip text.</p> <p>Default: <code>\"tooltip\"</code></p>"},{"location":"tree-schema/#tooltip_from_source","title":"<code>tooltip_from_source</code>","text":"<p>This node instructs to add tooltips to parts of a structure. The tooltips are defined by an annotation resource included in the same file this structure was loaded from. Only applicable if the structure was loaded from an mmCIF or BinaryCIF file.</p> <p>Parent: <code>structure</code></p> <p>Params:</p> <ul> <li><code>schema:</code><code>\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"</code></li> </ul> <p>Annotation schema defines what fields in the annotation will be taken into account.</p> <ul> <li><code>block_header?:</code><code>string | null</code></li> </ul> <p>Header of the CIF block to read annotation from. If <code>null</code>, block is selected based on <code>block_index</code>.</p> <p>Default: <code>null</code></p> <ul> <li><code>block_index?:</code><code>Integer</code></li> </ul> <p>0-based index of the CIF block to read annotation from (only applies when <code>block_header</code> is <code>null</code>).</p> <p>Default: <code>0</code></p> <ul> <li><code>category_name?:</code><code>string | null</code></li> </ul> <p>Name of the CIF category to read annotation from. If <code>null</code>, the first category in the block is used.</p> <p>Default: <code>null</code></p> <ul> <li><code>field_name?:</code><code>string</code></li> </ul> <p>Name of the column in CIF or field name (key) in JSON that contains the tooltip text.</p> <p>Default: <code>\"tooltip\"</code></p>"},{"location":"tree-schema/#focus","title":"<code>focus</code>","text":"<p>This node instructs to set the camera focus to a component (zoom in).</p> <p>Parent: <code>root</code> or <code>component</code> or <code>component_from_uri</code> or <code>component_from_source</code> or <code>primitives</code> or <code>primitives_from_uri</code> or <code>volume</code> or <code>volume_representation</code></p> <p>Params:</p> <ul> <li><code>direction?:</code><code>[number, number, number]</code></li> </ul> <p>Vector describing the direction of the view (camera position -&gt; focused target).</p> <p>Default: <code>[0, 0, -1]</code></p> <ul> <li><code>up?:</code><code>[number, number, number]</code></li> </ul> <p>Vector which will be aligned with the screen Y axis.</p> <p>Default: <code>[0, 1, 0]</code></p> <ul> <li><code>radius?:</code><code>number | null</code></li> </ul> <p>Radius of the focused sphere (overrides <code>radius_factor</code> and <code>radius_extra</code>).</p> <p>Default: <code>null</code></p> <ul> <li><code>radius_factor?:</code><code>number</code></li> </ul> <p>Radius of the focused sphere relative to the radius of parent component (default: 1). Focused radius = component_radius * radius_factor + radius_extent.</p> <p>Default: <code>1</code></p> <ul> <li><code>radius_extent?:</code><code>number</code></li> </ul> <p>Addition to the radius of the focused sphere, if computed from the radius of parent component (default: 0). Focused radius = component_radius * radius_factor + radius_extent.</p> <p>Default: <code>0</code></p>"},{"location":"tree-schema/#camera","title":"<code>camera</code>","text":"<p>This node instructs to set the camera position and orientation.</p> <p>Parent: <code>root</code></p> <p>Params:</p> <ul> <li><code>target:</code><code>[number, number, number]</code></li> </ul> <p>Coordinates of the point in space at which the camera is pointing.</p> <ul> <li><code>position:</code><code>[number, number, number]</code></li> </ul> <p>Coordinates of the camera.</p> <ul> <li><code>up?:</code><code>[number, number, number]</code></li> </ul> <p>Vector which will be aligned with the screen Y axis.</p> <p>Default: <code>[0, 1, 0]</code></p>"},{"location":"tree-schema/#canvas","title":"<code>canvas</code>","text":"<p>This node sets canvas properties.</p> <p>Parent: <code>root</code></p> <p>Params:</p> <ul> <li><code>background_color:</code><code>ColorName | HexColor</code></li> </ul> <p>Color of the canvas background. Can be either an X11 color name (e.g. <code>\"red\"</code>) or a hexadecimal code (e.g. <code>\"#FF0011\"</code>).</p>"},{"location":"tree-schema/#primitives","title":"<code>primitives</code>","text":"<p>This node groups a list of geometrical primitives</p> <p>Parent: <code>structure</code> or <code>root</code></p> <p>Params:</p> <ul> <li><code>color?:</code><code>ColorName | HexColor</code></li> </ul> <p>Default color for primitives in this group.</p> <p>Default: <code>\"white\"</code></p> <ul> <li><code>label_color?:</code><code>ColorName | HexColor</code></li> </ul> <p>Default label color for primitives in this group.</p> <p>Default: <code>\"white\"</code></p> <ul> <li><code>tooltip?:</code><code>string | null</code></li> </ul> <p>Default tooltip for primitives in this group.</p> <p>Default: <code>null</code></p> <ul> <li><code>opacity?:</code><code>number</code></li> </ul> <p>Opacity of primitive geometry in this group.</p> <p>Default: <code>1</code></p> <ul> <li><code>label_opacity?:</code><code>number</code></li> </ul> <p>Opacity of primitive labels in this group.</p> <p>Default: <code>1</code></p> <ul> <li><code>instances?:</code><code>Array&lt;Array&lt;number&gt;&gt; | null</code></li> </ul> <p>Instances of this primitive group defined as 4x4 column major (j * 4 + i indexing) transformation matrices.</p> <p>Default: <code>null</code></p>"},{"location":"tree-schema/#primitives_from_uri","title":"<code>primitives_from_uri</code>","text":"<p>This node loads a list of primitives from URI</p> <p>Parent: <code>structure</code> or <code>root</code></p> <p>Params:</p> <ul> <li><code>uri:</code><code>string</code></li> </ul> <p>Location of the resource.</p> <ul> <li><code>format:</code><code>\"mvs-node-json\"</code></li> </ul> <p>Format of the data.</p> <ul> <li><code>references?:</code><code>Array&lt;string&gt;</code></li> </ul> <p>List of nodes the data are referencing.</p> <p>Default: <code>[]</code></p>"},{"location":"tree-schema/#primitive","title":"<code>primitive</code>","text":"<p>This node represents a geometrical primitive</p> <p>Parent: <code>primitives</code></p> <p>Params:</p> <ul> <li><code>kind:</code><code>mesh | lines | tube | arrow | distance_measurement | angle_measurement | label | ellipse | ellipsoid | box</code></li> </ul> <p>Kind of geometrical primitive</p> <p>[This parameter determines the rest of parameters]</p> <p>Case <code>kind: \"mesh\"</code>:</p> <ul> <li> <p><code>vertices:</code><code>Array&lt;number&gt;</code></p> <p>3*n_vertices length array of floats with vertex position (x1, y1, z1, ...).</p> </li> <li> <p><code>indices:</code><code>Array&lt;Integer&gt;</code></p> <p>3*n_triangles length array of indices into vertices that form triangles (t1_1, t1_2, t1_3, ...).</p> </li> <li> <p><code>triangle_groups?:</code><code>Array&lt;Integer&gt; | null</code></p> <p>Assign a number to each triangle to group them. If not specified, each triangle is considered a separate group (triangle i = group i).</p> <p>Default: <code>null</code></p> </li> <li> <p><code>group_colors?:</code><code>{ [K in Integer]: (ColorName | HexColor) }</code></p> <p>Assign a color to each group. Where not assigned, uses <code>color</code>.</p> <p>Default: <code>{}</code></p> </li> <li> <p><code>group_tooltips?:</code><code>{ [K in Integer]: string }</code></p> <p>Assign a tooltip to each group. Where not assigned, uses <code>tooltip</code>.</p> <p>Default: <code>{}</code></p> </li> <li> <p><code>color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the triangles and wireframe. Can be overwritten by <code>group_colors</code>. If not specified, uses the parent primitives group <code>color</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>tooltip?:</code><code>string | null</code></p> <p>Tooltip shown when hovering over the mesh. Can be overwritten by <code>group_tooltips</code>. If not specified, uses the parent primitives group <code>tooltip</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>show_triangles?:</code><code>boolean</code></p> <p>Determine whether to render triangles of the mesh.</p> <p>Default: <code>true</code></p> </li> <li> <p><code>show_wireframe?:</code><code>boolean</code></p> <p>Determine whether to render wireframe of the mesh.</p> <p>Default: <code>false</code></p> </li> <li> <p><code>wireframe_width?:</code><code>number</code></p> <p>Wireframe line width (in screen-space units).</p> <p>Default: <code>1</code></p> </li> <li> <p><code>wireframe_color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Wireframe color. If not specified, uses <code>group_colors</code>.</p> <p>Default: <code>null</code></p> </li> </ul> <p>Case <code>kind: \"lines\"</code>:</p> <ul> <li> <p><code>vertices:</code><code>Array&lt;number&gt;</code></p> <p>3*n_vertices length array of floats with vertex position (x1, y1, z1, ...).</p> </li> <li> <p><code>indices:</code><code>Array&lt;Integer&gt;</code></p> <p>2*n_lines length array of indices into vertices that form lines (l1_1, l1_2, ...).</p> </li> <li> <p><code>line_groups?:</code><code>Array&lt;Integer&gt; | null</code></p> <p>Assign a number to each triangle to group them. If not specified, each line is considered a separate group (line i = group i).</p> <p>Default: <code>null</code></p> </li> <li> <p><code>group_colors?:</code><code>{ [K in Integer]: (ColorName | HexColor) }</code></p> <p>Assign a color to each group. Where not assigned, uses <code>color</code>.</p> <p>Default: <code>{}</code></p> </li> <li> <p><code>group_tooltips?:</code><code>{ [K in Integer]: string }</code></p> <p>Assign a tooltip to each group. Where not assigned, uses <code>tooltip</code>.</p> <p>Default: <code>{}</code></p> </li> <li> <p><code>group_widths?:</code><code>{ [K in Integer]: number }</code></p> <p>Assign a line width to each group. Where not assigned, uses <code>width</code>.</p> <p>Default: <code>{}</code></p> </li> <li> <p><code>color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the lines. Can be overwritten by <code>group_colors</code>. If not specified, uses the parent primitives group <code>color</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>tooltip?:</code><code>string | null</code></p> <p>Tooltip shown when hovering over the lines. Can be overwritten by <code>group_tooltips</code>. If not specified, uses the parent primitives group <code>tooltip</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>width?:</code><code>number</code></p> <p>Line width (in screen-space units). Can be overwritten by <code>group_widths</code>.</p> <p>Default: <code>1</code></p> </li> </ul> <p>Case <code>kind: \"tube\"</code>:</p> <ul> <li> <p><code>start:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>Start point of the tube.</p> </li> <li> <p><code>end:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>End point of the tube.</p> </li> <li> <p><code>radius?:</code><code>number</code></p> <p>Tube radius (in Angstroms).</p> <p>Default: <code>0.05</code></p> </li> <li> <p><code>dash_length?:</code><code>number | null</code></p> <p>Length of each dash and gap between dashes. If not specified (null), draw full line.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the tube. If not specified, uses the parent primitives group <code>color</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>tooltip?:</code><code>string | null</code></p> <p>Tooltip to show when hovering over the tube. If not specified, uses the parent primitives group <code>tooltip</code>.</p> <p>Default: <code>null</code></p> </li> </ul> <p>Case <code>kind: \"arrow\"</code>:</p> <ul> <li> <p><code>start:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>Start point of the arrow.</p> </li> <li> <p><code>end?:</code><code>([number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;) | null</code></p> <p>End point of the arrow.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>direction?:</code><code>[number, number, number] | null</code></p> <p>If specified, the endpoint is computed as start + direction.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>length?:</code><code>number | null</code></p> <p>Length of the arrow. If unset, the distance between start and end is used.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>show_start_cap?:</code><code>boolean</code></p> <p>Draw a cap at the start of the arrow.</p> <p>Default: <code>false</code></p> </li> <li> <p><code>start_cap_length?:</code><code>number</code></p> <p>Length of the start cap.</p> <p>Default: <code>0.1</code></p> </li> <li> <p><code>start_cap_radius?:</code><code>number</code></p> <p>Radius of the start cap.</p> <p>Default: <code>0.1</code></p> </li> <li> <p><code>show_end_cap?:</code><code>boolean</code></p> <p>Draw a cap at the end of the arrow.</p> <p>Default: <code>false</code></p> </li> <li> <p><code>end_cap_length?:</code><code>number</code></p> <p>Length of the end cap.</p> <p>Default: <code>0.1</code></p> </li> <li> <p><code>end_cap_radius?:</code><code>number</code></p> <p>Radius of the end cap.</p> <p>Default: <code>0.1</code></p> </li> <li> <p><code>show_tube?:</code><code>boolean</code></p> <p>Draw a tube connecting the start and end points.</p> <p>Default: <code>true</code></p> </li> <li> <p><code>tube_radius?:</code><code>number</code></p> <p>Tube radius (in Angstroms).</p> <p>Default: <code>0.05</code></p> </li> <li> <p><code>tube_dash_length?:</code><code>number | null</code></p> <p>Length of each dash and gap between dashes. If not specified (null), draw full line.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the tube. If not specified, uses the parent primitives group <code>color</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>tooltip?:</code><code>string | null</code></p> <p>Tooltip to show when hovering over the arrow. If not specified, uses the parent primitives group <code>tooltip</code>.</p> <p>Default: <code>null</code></p> </li> </ul> <p>Case <code>kind: \"distance_measurement\"</code>:</p> <ul> <li> <p><code>start:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>Start point of the tube.</p> </li> <li> <p><code>end:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>End point of the tube.</p> </li> <li> <p><code>radius?:</code><code>number</code></p> <p>Tube radius (in Angstroms).</p> <p>Default: <code>0.05</code></p> </li> <li> <p><code>dash_length?:</code><code>number | null</code></p> <p>Length of each dash and gap between dashes. If not specified (null), draw full line.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the tube. If not specified, uses the parent primitives group <code>color</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>label_template?:</code><code>string</code></p> <p>Template used to construct the label. Use {{distance}} as placeholder for the distance.</p> <p>Default: <code>\"{{distance}}\"</code></p> </li> <li> <p><code>label_size?:</code><code>number | null</code></p> <p>Size of the label (text height in Angstroms). If not specified, size will be relative to the distance (see label_auto_size_scale, label_auto_size_min).</p> <p>Default: <code>null</code></p> </li> <li> <p><code>label_auto_size_scale?:</code><code>number</code></p> <p>Scaling factor for relative size.</p> <p>Default: <code>0.1</code></p> </li> <li> <p><code>label_auto_size_min?:</code><code>number</code></p> <p>Minimum size for relative size.</p> <p>Default: <code>0</code></p> </li> <li> <p><code>label_color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the label. If not specified, uses the parent primitives group <code>label_color</code>.</p> <p>Default: <code>null</code></p> </li> </ul> <p>Case <code>kind: \"angle_measurement\"</code>:</p> <ul> <li> <p><code>a:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>Point A.</p> </li> <li> <p><code>b:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>Point B.</p> </li> <li> <p><code>c:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>Point C.</p> </li> <li> <p><code>label_template?:</code><code>string</code></p> <p>Template used to construct the label. Use {{angle}} as placeholder for the angle in radians.</p> <p>Default: <code>\"{{angle}}\"</code></p> </li> <li> <p><code>label_size?:</code><code>number | null</code></p> <p>Size of the label (text height in Angstroms). If not specified, size will be relative to the distance (see label_auto_size_scale, label_auto_size_min).</p> <p>Default: <code>null</code></p> </li> <li> <p><code>label_auto_size_scale?:</code><code>number</code></p> <p>Scaling factor for relative size.</p> <p>Default: <code>0.33</code></p> </li> <li> <p><code>label_auto_size_min?:</code><code>number</code></p> <p>Minimum size for relative size.</p> <p>Default: <code>0</code></p> </li> <li> <p><code>label_color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the label. If not specified, uses the parent primitives group <code>label_color</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>show_vector?:</code><code>boolean</code></p> <p>Draw vectors between (a, b) and (b, c).</p> <p>Default: <code>true</code></p> </li> <li> <p><code>vector_color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the vectors.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>show_section?:</code><code>boolean</code></p> <p>Draw a filled circle section representing the angle.</p> <p>Default: <code>true</code></p> </li> <li> <p><code>section_color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the angle section. If not specified, the primitives group color is used.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>section_radius?:</code><code>number | null</code></p> <p>Radius of the angle section. In angstroms.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>section_radius_scale?:</code><code>number</code></p> <p>Factor to scale the radius of the angle section. Ignored if section_radius is set.</p> <p>Default: <code>0.33</code></p> </li> </ul> <p>Case <code>kind: \"label\"</code>:</p> <ul> <li> <p><code>position:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>Position of this label.</p> </li> <li> <p><code>text:</code><code>string</code></p> <p>The label.</p> </li> <li> <p><code>label_size?:</code><code>number</code></p> <p>Size of the label (text height in Angstroms).</p> <p>Default: <code>1</code></p> </li> <li> <p><code>label_color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the label. If not specified, uses the parent primitives group <code>label_color</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>label_offset?:</code><code>number</code></p> <p>Camera-facing offset to prevent overlap with geometry.</p> <p>Default: <code>0</code></p> </li> </ul> <p>Case <code>kind: \"ellipse\"</code>:</p> <ul> <li> <p><code>color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the ellipse. If not specified, uses the parent primitives group <code>color</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>as_circle?:</code><code>boolean</code></p> <p>If true, ignores radius_minor/magnitude of the minor axis.</p> <p>Default: <code>false</code></p> </li> <li> <p><code>center:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>The center of the ellipse.</p> </li> <li> <p><code>major_axis?:</code><code>[number, number, number] | null</code></p> <p>Major axis of this ellipse.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>minor_axis?:</code><code>[number, number, number] | null</code></p> <p>Minor axis of this ellipse.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>major_axis_endpoint?:</code><code>([number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;) | null</code></p> <p>Major axis endpoint. If specified, overrides major axis to be major_axis_endpoint - center.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>minor_axis_endpoint?:</code><code>([number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;) | null</code></p> <p>Minor axis endpoint. If specified, overrides minor axis to be minor_axis_endpoint - center.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>radius_major?:</code><code>number | null</code></p> <p>Radius of the major axis. If unset, the length of the major axis is used.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>radius_minor?:</code><code>number | null</code></p> <p>Radius of the minor axis. If unset, the length of the minor axis is used.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>theta_start?:</code><code>number</code></p> <p>Start of the arc. In radians</p> <p>Default: <code>0</code></p> </li> <li> <p><code>theta_end?:</code><code>number</code></p> <p>End of the arc. In radians</p> <p>Default: <code>6.283185307179586</code></p> </li> <li> <p><code>tooltip?:</code><code>string | null</code></p> <p>Tooltip to show when hovering over the tube. If not specified, uses the parent primitives group <code>tooltip</code>.</p> <p>Default: <code>null</code></p> </li> </ul> <p>Case <code>kind: \"ellipsoid\"</code>:</p> <ul> <li> <p><code>color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the ellipsoid. If not specified, uses the parent primitives group <code>color</code>.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>center:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>The center of the ellipsoid.</p> </li> <li> <p><code>major_axis?:</code><code>[number, number, number] | null</code></p> <p>Major axis of this ellipsoid.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>minor_axis?:</code><code>[number, number, number] | null</code></p> <p>Minor axis of this ellipsoid.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>major_axis_endpoint?:</code><code>([number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;) | null</code></p> <p>Major axis endpoint. If specified, overrides major axis to be major_axis_endpoint - center.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>minor_axis_endpoint?:</code><code>([number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;) | null</code></p> <p>Minor axis endpoint. If specified, overrides minor axis to be minor_axis_endpoint - center.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>radius?:</code><code>([number, number, number] | number) | null</code></p> <p>Radii of the ellipsoid along each axis.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>radius_extent?:</code><code>([number, number, number] | number) | null</code></p> <p>Added to the radii of the ellipsoid along each axis.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>tooltip?:</code><code>string | null</code></p> <p>Tooltip to show when hovering over the tube. If not specified, uses the parent primitives group <code>tooltip</code>.</p> <p>Default: <code>null</code></p> </li> </ul> <p>Case <code>kind: \"box\"</code>:</p> <ul> <li> <p><code>center:</code><code>[number, number, number] | Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt; | Array&lt;Partial&lt;{ structure_ref: string, expression_schema: (\"whole_structure\" | \"entity\" | \"chain\" | \"auth_chain\" | \"residue\" | \"auth_residue\" | \"residue_range\" | \"auth_residue_range\" | \"atom\" | \"auth_atom\" | \"all_atomic\"), expressions: Array&lt;Partial&lt;{ label_entity_id: string, label_asym_id: string, auth_asym_id: string, label_seq_id: Integer, auth_seq_id: Integer, pdbx_PDB_ins_code: string, beg_label_seq_id: Integer, end_label_seq_id: Integer, beg_auth_seq_id: Integer, end_auth_seq_id: Integer, label_atom_id: string, auth_atom_id: string, type_symbol: string, atom_id: Integer, atom_index: Integer }&gt;&gt; }&gt;&gt;</code></p> <p>The center of the box.</p> </li> <li> <p><code>extent?:</code><code>[number, number, number] | null</code></p> <p>The width, the height, and the depth of the box. Added to the bounding box determined by the center.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>show_faces?:</code><code>boolean</code></p> <p>Determine whether to render the faces of the box.</p> <p>Default: <code>true</code></p> </li> <li> <p><code>face_color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the box faces.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>show_edges?:</code><code>boolean</code></p> <p>Determine whether to render the edges of the box.</p> <p>Default: <code>false</code></p> </li> <li> <p><code>edge_radius?:</code><code>number</code></p> <p>Radius of the box edges. In angstroms.</p> <p>Default: <code>0.1</code></p> </li> <li> <p><code>edge_color?:</code><code>(ColorName | HexColor) | null</code></p> <p>Color of the edges.</p> <p>Default: <code>null</code></p> </li> <li> <p><code>tooltip?:</code><code>string | null</code></p> <p>Tooltip to show when hovering over the tube. If not specified, uses the parent primitives group <code>tooltip</code>.</p> <p>Default: <code>null</code></p> </li> </ul>"},{"location":"volumes/","title":"MolViewSpec volumes","text":"<p>Electron density data from MX and EM experiments is invaluable when interrogating molecular structures. MolViewSpec  allows you to add density data to a scene by parsing a dedicated file or by querying the Mol* Volume Server (PDBe:  https://www.ebi.ac.uk/pdbe/densities/ - RCSB PDB: https://maps.rcsb.org/) for this data when working with PDB entries.</p>"},{"location":"volumes/#parsing-a-file","title":"Parsing a file","text":"<p>Volumetric data has a similar flow as the loading of standard molecular mmCIF data: <code>download</code>, <code>parse</code>, and <code>volume</code>  (comparable to <code>model_structure</code> or <code>assembly_structure</code>).</p> <p>Specify the format as part of the parse step.</p> <pre><code>builder = create_builder()\n\ndownload = builder.download(url=\"https://www.ebi.ac.uk/pdbe/entry-files/1tqn.ccp4\")\nvolume = download.parse(format=\"map\").volume()\n</code></pre> <p>Analogous to standard molecular data, dedicated and customizable representations can now be added. In this case  <code>isosurface</code>. <code>relative_isovalue</code> or <code>absolute_isovalue</code> adjust, which parts of the data are shown. <code>show_wireframe</code> and <code>show_faces</code> provide options for finer-grained customization. Define colors and transparency as usual.</p> <pre><code>(\n    volume.representation(type=\"isosurface\", relative_isovalue=1, show_wireframe=True)\n    .color(color=\"blue\")\n    .opacity(opacity=0.66)\n)\n</code></pre>"},{"location":"volumes/#querying-mol-volume-server","title":"Querying Mol* Volume Server","text":"<p>Density data is particularly useful when combined with 3D structure data.</p> <p>Create a view of 1tqn, which represents the ligand as ball-and-stick and focuses on it.</p> <pre><code>builder = create_builder()\n\nstructure = builder.download(url=_url_for_mmcif(\"1tqn\")).parse(format=\"mmcif\").model_structure()\nstructure.component(selector=\"polymer\").representation(type=\"cartoon\").color(color=\"white\")\nligand = structure.component(selector=\"ligand\")\nligand.representation(type=\"ball_and_stick\").color(custom={\"molstar_color_theme_name\": \"element-symbol\"})\nligand.focus(up=[0.98, -0.19, 0], direction=[-28.47, -17.66, -16.32], radius=14, radius_extent=5)\n</code></pre> <p>Enrich this view with density data, provided by PDBe's Volume Server.</p> <pre><code>volume_data = builder.download(\n    url=\"https://www.ebi.ac.uk/pdbe/densities/x-ray/1tqn/box/-22.367,-33.367,-21.634/-7.106,-10.042,-0.937?detail=3\"\n).parse(format=\"bcif\")\n</code></pre> <p>With this data at hand, dedicated channels can be created that visualize the electron density.</p> <pre><code>volume_data.volume(channel_id=\"2FO-FC\").representation(\n    type=\"isosurface\",\n    relative_isovalue=1.5,\n    show_wireframe=True,\n    show_faces=False,\n).color(color=\"blue\").opacity(opacity=0.3)\n\nfo_fc = volume_data.volume(channel_id=\"FO-FC\")\nfo_fc.representation(type=\"isosurface\", relative_isovalue=3, show_wireframe=True).color(color=\"green\").opacity(\n    opacity=0.3\n)\nfo_fc.representation(type=\"isosurface\", relative_isovalue=-3, show_wireframe=True).color(color=\"red\").opacity(\n    opacity=0.3\n)\n</code></pre> <p></p>"},{"location":"mvs-molstar-extension/","title":"Mol* MVS Extension","text":"<p>Mol* MolViewSpec extension provides functionality for building, validating, and visualizing MVS views.</p>"},{"location":"mvs-molstar-extension/#graphical-user-interface","title":"Graphical user interface","text":"<p>There are multiple ways to load MolViewSpec views (<code>.mvsj</code>/<code>.mvsx</code>) into Mol* Viewer:</p> <ul> <li> <p>Drag&amp;drop support: The easiest way to load a MVS view into Mol* Viewer is to drag a <code>.mvsj</code> or <code>.mvsx</code> file and drop it in a browser window with Mol* Viewer.</p> <p>Test with these files: 1cbs.mvsj, 1h9t.mvsx</p> <p></p> </li> <li> <p>Load via menu: Another way to load a MVS view is to use \"Download File\" or \"Open Files\" action, available in the \"Home\" tab in the left panel. For these actions, the \"Format\" parameter must be set to \"MVSJ\" or \"MVSX\" (in the \"Miscellaneous\" category) or \"Auto\".</p> <p>Test with this URL:</p> <pre><code>https://raw.githubusercontent.com/molstar/molstar/master/examples/mvs/1cbs.mvsj\n</code></pre> <p></p> <p></p> </li> <li> <p>URL parameters: Mol* Viewer supports <code>mvs-url</code>, <code>mvs-data</code>, and <code>mvs-format</code> URL parameters to specify a MVS view to be loaded when the viewer is initialized.</p> <ul> <li><code>mvs-url</code> specifies the address from which the MVS view should be retrieved.</li> <li><code>mvs-data</code> specifies the MVS view data directly. Keep in mind that some characters must be escaped to be used in the URL. Also beware that URLs longer than 2000 character may not work in all browsers. Because of these limitations, the preferred method it to host the data somewhere and use <code>mvs-url</code> instead.</li> <li><code>mvs-format</code> specifies the format of the MVS view data from <code>mvs-url</code> or <code>mvs-data</code>. Allowed values are <code>mvsj</code> and <code>mvsx</code> (default is <code>mvsj</code>).</li> </ul> <p>Examples of URL parameter usage:</p> <ul> <li> <p>Load MVSJ</p> </li> <li> <p>Load MVSX</p> </li> <li> <p>URL Encoded MVSJ</p> </li> <li> <p>URL Encoded MVSX</p> </li> </ul> </li> </ul>"},{"location":"mvs-molstar-extension/#programming-interface","title":"Programming interface","text":"<p>Most functions for manipulation of MVS data (including parsing, encoding, validating, and building) are provided by the <code>MVSData</code> object (defined in src/extensions/mvs/mvs-data.ts). In TypeScript, <code>MVSData</code> is also the type for a MVS view.</p> <p>The <code>loadMVS</code> function (defined in src/extensions/mvs/load.ts) can be used to load MVS view data into Mol* Viewer.</p> <p>Example usage:</p> <pre><code>// Fetch a MVS, validate, and load\nconst response = await fetch('https://raw.githubusercontent.com/molstar/molstar/master/examples/mvs/1cbs.mvsj');\nconst rawData = await response.text();\nconst mvsData: MVSData = MVSData.fromMVSJ(rawData);\nif (!MVSData.isValid(mvsData)) throw new Error(`Oh no: ${MVSData.validationIssues(mvsData)}`);\nawait loadMVS(this.plugin, mvsData, { replaceExisting: true });\nconsole.log('Loaded this:', MVSData.toPrettyString(mvsData));\nconsole.log('Loaded this:', MVSData.toMVSJ(mvsData));\n\n// Build a MVS and load\nconst builder = MVSData.createBuilder();\nconst structure = builder.download({ url: 'https://www.ebi.ac.uk/pdbe/entry-files/download/1og2_updated.cif' }).parse({ format: 'mmcif' }).modelStructure();\nstructure.component({ selector: 'polymer' }).representation({ type: 'cartoon' });\nstructure.component({ selector: 'ligand' }).representation({ type: 'ball_and_stick' }).color({ color: '#aa55ff' });\nconst mvsData2: MVSData = builder.getState();\nawait loadMVS(this.plugin, mvsData2, { replaceExisting: false });\n</code></pre> <p>When using the pre-built Mol* plugin bundle, <code>MVSData</code> and <code>loadMVS</code> are exposed as <code>molstar.PluginExtensions.mvs.MVSData</code> and <code>molstar.PluginExtensions.mvs.loadMVS</code>. Furthermore, the <code>molstar.Viewer</code> class has <code>loadMvsFromUrl</code> and <code>loadMvsData</code> methods, providing the same functionality as <code>mvs-url</code> and <code>mvs-data</code> URL parameters. </p> <p>See MolViewSpec extension in Mol* - Integration in web pages for a demonstration.</p>"},{"location":"mvs-molstar-extension/#command-line-utilities","title":"Command-line utilities","text":"<p>The MVS extension in Mol* provides a few command-line utilities, which can be executed via NodeJS:</p> <ul> <li><code>mvs-validate</code> provides validation of MolViewSpec files</li> <li><code>mvs-render</code> creates images based on MolViewSpec files</li> <li><code>mvs-print-schema</code> prints MolViewSpec tree schema (i.e. currently supported node types and their parameters)</li> </ul> <p>Example usage:</p> <pre><code># Clone Mol* repo, install, and build\ngit clone https://github.com/molstar/molstar.git\ncd molstar/\nnpm install &amp;&amp; npm run build\n\n# Validate a MolViewSpec file `examples/mvs/1cbs.mvsj`\nnode lib/commonjs/cli/mvs/mvs-validate.js examples/mvs/1cbs.mvsj\n\n# Render a MolViewSpec file `examples/mvs/1cbs.mvsj` to `../outputs/1cbs.png`\nnode lib/commonjs/cli/mvs/mvs-render.js -i examples/mvs/1cbs.mvsj -o ../outputs/1cbs.png --size 800x600 --molj\n\n# Print MolViewSpec tree schema formatted as markdown\nnode lib/commonjs/cli/mvs/mvs-print-schema.js --markdown\n</code></pre> <p>(An alternative to cloning the GitHub repository is to install Mol* package from npm by <code>npm install molstar canvas gl jpeg-js pngjs</code>. Then you can type <code>npx mvs-validate ...</code> instead of <code>node lib/commonjs/cli/mvs/mvs-validate.js ...</code>)</p>"},{"location":"mvs-molstar-extension/integration/","title":"Mol* MVS Extension: Integration in web pages","text":"<p>This page demonstrates several methods to integrate Mol* Viewer in a web page and use MolViewSpec functionality.</p> <p></p>"},{"location":"mvs-molstar-extension/integration/#example-1","title":"Example 1","text":""},{"location":"mvs-molstar-extension/integration/#get-mvs-view-from-a-server-and-pass-to-the-viewer","title":"Get MVS view from a server and pass to the viewer","text":"<p>The recommended method is to serve the MVS files from your server (either as static files or generated by the server on-demand) and call the <code>loadMvsFromUrl</code> method to retrieve and load them. This example uses a MVS file from the address specified in the <code>sourceUrl</code> variable. If the MVS view file contains relative references, they will be resolved as relative to <code>sourceUrl</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;!-- Replace \"latest\" by the specific version you want to use, e.g. \"4.0.0\" --&gt;\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/molstar@latest/build/viewer/molstar.js\"&gt;&lt;/script&gt;\n        &lt;!-- Replace \"latest\" by the specific version you want to use, e.g. \"4.0.0\" --&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/molstar@latest/build/viewer/molstar.css\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"viewer1\" style=\"position: relative; width: 500px; height: 500px;\"&gt;&lt;/div&gt;\n        &lt;script&gt;\n            const sourceUrl = 'https://raw.githubusercontent.com/molstar/molstar/master/examples/mvs/1h9t_domain_labels.mvsj';\n            molstar.Viewer\n                .create('viewer1', { layoutIsExpanded: false, layoutShowControls: false })\n                .then(viewer =&gt; viewer.loadMvsFromUrl(sourceUrl, 'mvsj'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Result:</p>"},{"location":"mvs-molstar-extension/integration/#example-2","title":"Example 2","text":""},{"location":"mvs-molstar-extension/integration/#replace-mvs-view-after-loading","title":"Replace MVS view after loading","text":"<p>A variation of the first example is to <code>molstar.PluginExtensions.mvs.loadMVS</code> instead of <code>loadMvsFromUrl</code>. This allows replacing the MVS view after it has been loaded.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;!-- Replace \"latest\" by the specific version you want to use, e.g. \"4.0.0\" --&gt;\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/molstar@latest/build/viewer/molstar.js\"&gt;&lt;/script&gt;\n        &lt;!-- Replace \"latest\" by the specific version you want to use, e.g. \"4.0.0\" --&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/molstar@latest/build/viewer/molstar.css\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"viewer2\" style=\"position: relative; width: 500px; height: 500px;\"&gt;&lt;/div&gt;\n        &lt;button class=\"button\" onclick=\"loadView1();\"&gt;View 1&lt;/button&gt;\n        &lt;button class=\"button\" onclick=\"loadView2();\"&gt;View 2&lt;/button&gt;\n        &lt;script&gt;\n            let theViewer;\n            function load(viewer, url, replace) {\n                fetch(url)\n                    .then(response =&gt; response.text())\n                    .then(text =&gt; molstar.PluginExtensions.mvs.MVSData.fromMVSJ(text))\n                    .then(mvsData =&gt; molstar.PluginExtensions.mvs.loadMVS(viewer.plugin, mvsData, { sourceUrl: url, sanityChecks: true, replaceExisting: replace }));\n            }\n            function loadView1() {\n                load(theViewer, 'https://raw.githubusercontent.com/molstar/molstar/master/examples/mvs/1cbs.mvsj', true);\n            }\n            function loadView2() {\n                load(theViewer, 'https://raw.githubusercontent.com/molstar/molstar/master/examples/mvs/1cbs-focus.mvsj', true);\n            }\n            molstar.Viewer\n                .create('viewer2', { layoutIsExpanded: false, layoutShowControls: false })\n                .then(viewer =&gt; {\n                    theViewer = viewer;\n                    loadView1();\n                });\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Result:</p> <p>View 1 View 2</p>"},{"location":"mvs-molstar-extension/integration/#example-3","title":"Example 3","text":""},{"location":"mvs-molstar-extension/integration/#construct-mvs-view-on-frontend-and-pass-to-the-viewer","title":"Construct MVS view on frontend and pass to the viewer","text":"<p>Another option is to utilize the MVS builder provided by the extension to build the view on frontend and then pass it to the viewer. This example builds the view in plain JavaScript, directly in a &lt;script&gt; tag in HTML. However, for a better developer experience consider writing the code in TypeScript. If the built MVS view contains relative references, they will be resolved as relative to the URL of this HTML page.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;!-- Replace \"latest\" by the specific version you want to use, e.g. \"4.0.0\" --&gt;\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/molstar@latest/build/viewer/molstar.js\"&gt;&lt;/script&gt;\n        &lt;!-- Replace \"latest\" by the specific version you want to use, e.g. \"4.0.0\" --&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/molstar@latest/build/viewer/molstar.css\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"viewer3\" style=\"position: relative; width: 500px; height: 500px;\"&gt;&lt;/div&gt;\n        &lt;script&gt;\n            // Build an ad-hoc MVS view\n            const builder = molstar.PluginExtensions.mvs.MVSData.createBuilder();\n            const structure = builder\n                .download({ url: 'https://www.ebi.ac.uk/pdbe/entry-files/1cbs.bcif' })\n                .parse({ format: 'bcif' })\n                .modelStructure({});\n            structure\n                .component({ selector: 'polymer' })\n                .representation({ type: 'cartoon' })\n                .color({ color: 'green' });\n            structure\n                .component({ selector: 'ligand' })\n                .label({ text: 'Retinoic acid' })\n                .focus({})\n                .representation({ type: 'ball_and_stick' })\n                .color({ color: '#cc3399' });\n            const mvsData = builder.getState();\n            // Initialize viewer and load MVSJ\n            molstar.Viewer\n                .create('viewer3', { layoutIsExpanded: false, layoutShowControls: false })\n                .then(viewer =&gt; molstar.PluginExtensions.mvs.loadMVS(viewer.plugin, mvsData, { sourceUrl: undefined, sanityChecks: true, replaceExisting: false }));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Result:</p>"},{"location":"mvs-molstar-extension/load-extensions/","title":"Mol* MVS Extension: Custom Load Extensions","text":"<p>Mol* MolViewSpec extension provides functionality for customizing the state loading.</p>"},{"location":"mvs-molstar-extension/load-extensions/#is_hidden-custom-state-example","title":"<code>is_hidden</code> Custom State Example","text":""},{"location":"mvs-molstar-extension/load-extensions/#example-state","title":"Example State","text":"<p>The following state assigns <code>is_hidden</code> custom state to the representation:</p> <pre><code>builder = create_builder()\n(\n    builder.download(url=\"https://files.wwpdb.org/download/1cbs.cif\")\n    .parse(format=\"mmcif\")\n    .model_structure()\n    .component()\n    .representation(custom={\"is_hidden\": True})\n    .color(color=\"blue\")\n)\n</code></pre>"},{"location":"mvs-molstar-extension/load-extensions/#the-extension","title":"The Extension","text":"<p>Based on the <code>is_hidden</code> property, the extension will update the state of the corresponding Mol* node when loading the state to make the representation hidden:</p> <pre><code>import { MolstarLoadingExtension } from 'molstar/lib/extensions/mvs/load';\n\nexport const IsHiddenCustomStateExtension: MolstarLoadingExtension&lt;{}&gt; = {\n    id: 'is-hidden-custom-state',\n    description: 'Allow updating initial visibility of nodes',\n    createExtensionContext: () =&gt; ({}),\n    action: (updateTarget, node) =&gt; {\n        if (!node.custom || !node.custom?.is_hidden) return;\n        updateTarget.update.to(updateTarget.selector).updateState({ isHidden: true });\n    },\n};\n</code></pre>"},{"location":"mvs-molstar-extension/load-extensions/#using-the-extension","title":"Using the Extension","text":"<p>To load the state with the custom extension, use:</p> <pre><code>await loadMVS(this.plugin, data, { replaceExisting: false, extensions: [IsHiddenCustomStateExtension] });\n</code></pre> <p>See Mol* MVS Extension for more information how to use the <code>loadMVS</code> function.</p>"}]}